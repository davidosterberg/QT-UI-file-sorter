#!/usr/bin/env python3
# encoding: utf-8

from lxml import etree

# Inspired from here: https://stackoverflow.com/a/46128043

def sort_children(node, klass, key):
    """ Sort children along tag and given attribute.
    if attr is None, sort along all attributes"""
    if not isinstance(node.tag, str):  # PYTHON 2: use basestring instead
        # not a TAG, it is comment or DATA
        # no need to sort
        return

    if node.get('class') == klass:
        # sort child along attr
        node[:] = sorted(node, key=key)
    else:
        # and recurse
        for child in node:
            sort_children(child, klass, key)


def row_col_key(node):
    """Return the sorting key of an xml node
    using tag and attributes
    """
    row = node.get('row') if node.get('row') else -1
    col = node.get('column') if node.get('column') else -1

    return '{:04d}{:04d}'.format(int(row), int(col))


def remove_attr(node, attr, value):
    if not isinstance(node.tag, str):  # PYTHON 2: use basestring instead
        # not a TAG, it is comment or DATA
        # no need to sort
        return

    if node.get(attr) == value:
        node.attrib.pop(attr)

    for child in node:
        remove_attr(child, attr, value)



def process(infile, outfile, sort_qgridlayout=True, remove_stdset=True, remove_native=True):

    tree = etree.parse(infile)
    root = tree.getroot()

    if sort_qgridlayout:
        sort_children(root, "QGridLayout", row_col_key)
    if remove_stdset:
        remove_attr(root, "stdset", "0")
    if remove_native:
        remove_attr(root, "native", "true")

    output_unicode = etree.tostring(root,
                                    pretty_print=True,
                                    encoding='unicode')
    with open(outfile, 'w') as output_fp:
        output_fp.write('%s' % output_unicode)



import argparse

parser = argparse.ArgumentParser(prog='sort_ui',
                                 description="Qt UI file post processor")

parser.add_argument('filename',
                    metavar='filename',
                    type=str,
                    help='The path to the unsorted input file (*.ui)')

parser.add_argument('-o',
                    '--outfile',
                    metavar='outfile',
                    type=str,
                    help='The path to the sorted output file')

parser.add_argument('--no-sort-qgridlayout',
                    action='store_false',
                    dest='sort_qgridlayout',
                    help='Sort children of QGridLayout by row - column (default: true)')

parser.add_argument('--no-remove-stdset',
                    action='store_false',
                    dest='remove_stdset',
                    help='Do not remove any stdset="0" attribute (default: false)')

parser.add_argument('--no-remove-native',
                    action='store_false',
                    dest='remove_native',
                    help='Do not remove any native="true" attribute (default: false)')

parser.set_defaults(sort_qgridlayout=True, remove_stdset=True, remove_native=True)

# Execute the parse_args() method
args = parser.parse_args()

if args.outfile is None:
    filename_out = args.filename
else:
    filename_out = args.outfile

process(args.filename, filename_out, args.sort_qgridlayout, args.remove_stdset, args.remove_native)

